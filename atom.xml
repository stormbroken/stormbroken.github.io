<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stormbrokenの博客</title>
  
  <subtitle>留下生活学习的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-06T08:58:09.760Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Stormbroken</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迭代器与组合模式</title>
    <link href="http://yoursite.com/2019/10/06/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/06/迭代器与组合模式/</id>
    <published>2019-10-06T08:57:06.317Z</published>
    <updated>2019-10-06T08:58:09.760Z</updated>
    
    <content type="html"><![CDATA[<ol><li>管理良好的集合，我们有很多的方法可以把对象堆起来成为一个结合。<ul><li>你可以把他们放进数组、堆栈、列表或者是散列表中。</li></ul></li><li>这个模式主要是让客户能够遍历你的对象而又无法窥视你存储对象的方式。</li></ol><a id="more"></a><h1 id="迭代器模式引入"><a href="#迭代器模式引入" class="headerlink" title="迭代器模式引入"></a>迭代器模式引入</h1><ol><li>如果我们将很多持有不同类型的集合的对象合并，如何保证其兼容性。</li><li>可能很多代码依赖不同结构的数据存储</li><li>Lou的菜单实现</li></ol><img src="img\zh-1.png"><ol start="4"><li>Mel的菜单实现</li></ol><img src="img\zh-2.png"><h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><ol><li>在Lou的菜单中使用的是ArrayList而在Mel的菜单中使用的是数组<ul><li>所以我们需要实现一个同时使用两个菜单的客户代码。</li><li>我们往常需要使用多个循环来遍历多个不同存储类型的菜单项。</li></ul></li></ol><h2 id="问题的解决-可以封装遍历吗？"><a href="#问题的解决-可以封装遍历吗？" class="headerlink" title="问题的解决:可以封装遍历吗？"></a>问题的解决:可以封装遍历吗？</h2><ol><li>变化是:由不同的集合类型所造成的遍历，能不能够被我们封装。</li><li>那么我们创建一个对象:将它称为迭代器，利用它来封装“遍历集合内的每个对象的过程”。<ul><li><code>Iterator iterator = breakfastMenu.createIterator();</code></li><li><code>while(iterator.hasNext()){MenuItem menuItem = (MenuItem)iterator.next()}</code></li></ul></li></ol><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><ol><li>迭代器模式依赖于迭代器接口，迭代器接口如下。</li></ol><img src="img\zh-3.png"><ol start="2"><li>所有具体的迭代器都是对于迭代器接口的实现，而之后我们将实现了的迭代器挂钩到相应部分。</li></ol><h2 id="制造一个迭代器"><a href="#制造一个迭代器" class="headerlink" title="制造一个迭代器"></a>制造一个迭代器</h2><ol><li>首先定义迭代器接口</li></ol><img src="img\zh-4.png"><ol start="2"><li>接下来实现相应的具体迭代器</li></ol><img src="img\zh-5.png"><ol start="3"><li>使用迭代器改写餐厅菜单</li></ol><img src="img\zh-6.png"><h2 id="更新女招待菜单"><a href="#更新女招待菜单" class="headerlink" title="更新女招待菜单"></a>更新女招待菜单</h2><ol><li>修改其构造方法</li></ol><img src="img\zh-7.png"><ol start="2"><li>同时还进行封装，使用对外接口和对内接口的重载，防止信息泄露。</li></ol><img src="img\zh-8.png"><h2 id="进一步优化迭代器模式"><a href="#进一步优化迭代器模式" class="headerlink" title="进一步优化迭代器模式"></a>进一步优化迭代器模式</h2><ol><li>我们可以将煎饼屋菜单迭代器和餐厅菜单迭代器所扩展的接口，由我们自己的迭代器模式更新成java.util的迭代器或者ArrayList的迭代器。</li><li>使用相应的对象的Iterator操作<ul><li>并且改写部分remove操作</li></ul></li></ol><img src="img\zh-9.png"><h2 id="迭代器注意操作"><a href="#迭代器注意操作" class="headerlink" title="迭代器注意操作"></a>迭代器注意操作</h2><ol><li>同时在迭代器中的remove()也是可以被禁用。</li><li><strong>注意</strong>:多个迭代器引用同一个对象集合，在多线程中的后果是难以预料的。</li></ol><h2 id="最终的优化"><a href="#最终的优化" class="headerlink" title="最终的优化"></a>最终的优化</h2><ol><li>我们将具体的菜单改成Menu接口</li></ol><img src="img\zh-10.png"><ol start="2"><li>相应的菜单类都实现了Menu接口，女接待可以利用接口(而不是具体类)引用每一个菜单对象。</li></ol><img src="img\zh-11.png"><h2 id="正式定义-迭代器模式"><a href="#正式定义-迭代器模式" class="headerlink" title="正式定义:迭代器模式"></a>正式定义:迭代器模式</h2><ol><li><strong>迭代器模式</strong>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。<ul><li>也就是说这种模式能够保证你游走于聚合内的每一个元素，而又不暴露其内部的表示。</li></ul></li><li>把游走的任务放在迭代器上，而不是聚合上，这样简化了聚合的接口和实现，也让责任各得其所。</li></ol><h2 id="迭代器的不同类型"><a href="#迭代器的不同类型" class="headerlink" title="迭代器的不同类型"></a>迭代器的不同类型</h2><h3 id="内部的迭代器"><a href="#内部的迭代器" class="headerlink" title="内部的迭代器"></a>内部的迭代器</h3><ol><li>内部的迭代器是由迭代器自己控制进行游走。</li></ol><h3 id="外部的迭代器"><a href="#外部的迭代器" class="headerlink" title="外部的迭代器"></a>外部的迭代器</h3><ol><li>而外部的迭代器是由客户控制迭代过程</li></ol><h2 id="迭代器的扩展使用方法"><a href="#迭代器的扩展使用方法" class="headerlink" title="迭代器的扩展使用方法"></a>迭代器的扩展使用方法</h2><ol><li>迭代器不仅仅可以向后遍历，还可以向前遍历。</li><li>对于散列表也是可以进行存取，因为迭代器没有先后顺序只是取得所有元素而已。</li><li>Enumeration(枚举)接口实现了迭代器<ul><li>枚举接口是一个有次序的迭代器实现。大多数的java类都是支持迭代器的。</li></ul></li></ol><h2 id="我们做了什么？"><a href="#我们做了什么？" class="headerlink" title="我们做了什么？"></a>我们做了什么？</h2><ol><li>我们将女招待从实现中成功解耦。</li><li>我们增加了女招待的扩展性。</li></ol><h2 id="迭代器与集合"><a href="#迭代器与集合" class="headerlink" title="迭代器与集合"></a>迭代器与集合</h2><ol><li>我们所使用的这些类都属于Java Collection Framework的一部分，这其中的Framework中指的是一群类和接口，其中包括了ArrayList等很多具体的类。</li><li>除此以外上面的所有类，都实现了java.Collection类。</li></ol><h3 id="java5新特性-for语句"><a href="#java5新特性-for语句" class="headerlink" title="java5新特性:for语句"></a>java5新特性:for语句</h3><ol><li><code>for(&lt;T&gt; x : m)</code>直接避免了我们显式地使用遍历器。</li><li>但是我们需要使用java 5的泛型来保证for/in的类型安全。</li></ol><h1 id="设计原则-单一责任"><a href="#设计原则-单一责任" class="headerlink" title="设计原则:单一责任"></a>设计原则:单一责任</h1><ol><li>如果一个类不仅仅需要完成自己的事情(管理某种聚合)，还要担负更多的责任(例如遍历)时，我们就给了这个类两个变化的原因。<ul><li>这样子有两种可能导致一个类发生变化.</li></ul></li><li>类的每个责任都有改变的潜在区域,超过一个人责任,意味着超过一个改变的区域。</li></ol><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li>单一原则的内容:一个类应该只有一个引起变化的原因。</li><li>如果一个类具有两个及以上改变的原因，那么这会使得将来该类发生变化的几率上升。</li></ol><h2 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h2><ol><li>内聚主要是用来度量一个类或模块紧密地达到单一目的或责任。</li><li>高内聚:当一个模块或一个类被设计成只支持一组相关的功能时。</li><li>低内聚:当被设计支持一组不相关的功能时，我们说它有低内聚。</li></ol><h1 id="组合模式引入"><a href="#组合模式引入" class="headerlink" title="组合模式引入"></a>组合模式引入</h1><ol><li>在女招待中重复的调用print等语句实在是过于繁琐。所以我们想要将其进行解耦。</li><li>那么我们可以把整套操作封装到原来获取迭代器的部分上，接下来我们如果想要添加子菜单就没有办法了。</li></ol><h2 id="时机到了-我们要重构啦"><a href="#时机到了-我们要重构啦" class="headerlink" title="时机到了:我们要重构啦"></a>时机到了:我们要重构啦</h2><ol><li>那么问题来了，我们重构的目标是什么呢？<ol><li>我们需要某种树形结构能够容纳菜单、子菜单和菜单项。</li><li>我们需要确定能够在每个菜单的各个项之间游走，而且至少像现在使用迭代器一样方便。</li><li>我们也需要能够更有弹性地在菜单项之间游走。</li></ol></li></ol><h2 id="如何具体进行重构呢？"><a href="#如何具体进行重构呢？" class="headerlink" title="如何具体进行重构呢？"></a>如何具体进行重构呢？</h2><h2 id="菜单符合组合模式的结构的类图"><a href="#菜单符合组合模式的结构的类图" class="headerlink" title="菜单符合组合模式的结构的类图"></a>菜单符合组合模式的结构的类图</h2><img src="img\zh-13.png"><ol><li>那么我们怎么修正print方法呢?使用print()操作，用递归的方法完成。</li></ol><img src="img\zh-14.png"><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><ol><li>迭代器仍然是这个问题解决的一部分。</li></ol><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>组合模式允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。</p><h2 id="组合模式的特点"><a href="#组合模式的特点" class="headerlink" title="组合模式的特点"></a>组合模式的特点</h2><ol><li>组合模式让我们能用树形方式来创建对象的结构，树里面包含了组合以及个别对象。</li><li>使用组合结构在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。</li></ol><h2 id="组合模式的类图"><a href="#组合模式的类图" class="headerlink" title="组合模式的类图"></a>组合模式的类图</h2><img src="img\zh-12.png"><h2 id="组合模式注意点"><a href="#组合模式注意点" class="headerlink" title="组合模式注意点"></a>组合模式注意点</h2><ol><li>组件、组合、树:<ul><li>组合包含组件。组件有两种:组合、叶节点。</li></ul></li><li>如果有些从接口中继承的方法不得不实现，但是有不应该被具体实现，我们可以考虑抛出运行时异常:<code>UnsupportedOperationException</code></li></ol><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><ol><li>为什么组合模式不仅仅需要管理层次结构，还要执行菜单的操作,这是否不符合单一责任原则？<ul><li>组合模式以单一设计原则换取透明性。透明性是指通过让组件的接口同时包含一些子节点和叶节点的操作。</li><li>这是一个折衷的抉择</li></ul></li></ol><h2 id="组合与迭代器"><a href="#组合与迭代器" class="headerlink" title="组合与迭代器"></a>组合与迭代器</h2><ol><li>我们的目的是想要实现一个组合迭代器，那么我们需要为每个组件都加上createIterator()方法。</li></ol><img src="img\zh-15.png"><h3 id="CompositeIterator是什么？"><a href="#CompositeIterator是什么？" class="headerlink" title="CompositeIterator是什么？"></a>CompositeIterator是什么？</h3><ol><li>CompositeIterator是一个不可小觑的迭代器，其工作是遍历组件内的菜单项，并且确保所有的子菜单都被包括进来。</li><li>使用栈空间来保存各组件的Iterator</li></ol><img src="img\zh-16.png"><ol><li>上面的迭代器是外部迭代器，所以有许多需要追踪的事情，外部迭代器必须维护它在遍历中的位置，以便于外部客户可以通过相应的方法来访问它。</li></ol><h3 id="空迭代器是什么？"><a href="#空迭代器是什么？" class="headerlink" title="空迭代器是什么？"></a>空迭代器是什么？</h3><ol><li>菜单项中没什么可以遍历的，那么我们返回什么呢？<ul><li>选项一:null，但是这就需要在客户代码中处理这个问题</li><li>选项二:返回一个迭代器，而这个迭代器的hasNext()永远返回false，那么这个迭代器我们称为空迭代器。</li></ul></li></ol><h2 id="空迭代器的实现"><a href="#空迭代器的实现" class="headerlink" title="空迭代器的实现"></a>空迭代器的实现</h2><img src="img\zh-17.png"><h2 id="确保女招待可以确切地告诉我们哪些项目是素食的方法。"><a href="#确保女招待可以确切地告诉我们哪些项目是素食的方法。" class="headerlink" title="确保女招待可以确切地告诉我们哪些项目是素食的方法。"></a>确保女招待可以确切地告诉我们哪些项目是素食的方法。</h2><img src="img\zh-18.png"><ol><li>但是有人认为try/catch是一种错误处理的方法而不是程序逻辑的方法，那么如果不这么做的话，我们还有哪些选择呢？<ul><li>在调用is()方法前，使用instanceOf来检查菜单组件的运行时类型，来确定具体类型。</li></ul></li></ol><h2 id="组合模式究竟实现了什么呢？"><a href="#组合模式究竟实现了什么呢？" class="headerlink" title="组合模式究竟实现了什么呢？"></a>组合模式究竟实现了什么呢？</h2><ol><li>实现了管理有数个对象的集合，它们彼此之间有”整体/部分”的关系。</li><li>组件会有一个指向父亲的指针，保证在游走的时候更容易。</li><li>要考虑孩子的次序，就需要用更加复杂的又游走方式来进行。</li><li>考虑缓存，当组合结构很复杂，或者遍历的代价太高，那么实现组合节点的缓存就很有帮助。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;管理良好的集合，我们有很多的方法可以把对象堆起来成为一个结合。&lt;ul&gt;
&lt;li&gt;你可以把他们放进数组、堆栈、列表或者是散列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这个模式主要是让客户能够遍历你的对象而又无法窥视你存储对象的方式。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git 学习笔记</title>
    <link href="http://yoursite.com/2019/10/05/Git%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/05/Git操作学习笔记/</id>
    <published>2019-10-05T13:30:00.000Z</published>
    <updated>2019-10-06T08:58:17.057Z</updated>
    
    <content type="html"><![CDATA[<p>简要记录git学习笔记</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>参考了廖雪峰的教程，从2019年4月24日开始书写这个学习笔记。</p><h1 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h1><ol><li>世界上最先进的分布式版本控制系统</li><li>保留的版本更新的信息</li><li>使用C语言建立的</li></ol><h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><ol><li>初始化仓库<br><code>git init</code>：将这个目录底下变成git可以管理的仓库</li><li>添加文件进入仓库：<ol><li><code>git add file_name</code>：添加摸个文档，使用.表示所有修改。</li><li><code>git commit -m &quot;message&quot;</code>：使用-m完成对于本次提交的说明</li><li><code>git push URL</code>：向远程仓库进行提交</li></ol></li><li>查看结果：<ol><li><code>git status</code>:用于实施的掌控仓库的状态</li><li><code>git diff</code>：用于查看具体修改了什么内容（相比于上次）</li></ol></li><li>版本回退：<ol><li><code>git log</code>：用于查看历史记录，版本信息等。可以添加<code>--pretty=oneline</code>参数来格式化其形式为版本号+注释。</li><li><code>git reset --hard HEAD^</code>：  <ol><li>用于返回上一个版本</li><li>同时你无法使用<code>git log</code>找到原来的版本，但是可以在同一个窗口中，找到版本号回到未来的某个版本<ol><li>版本号可以不写全，只要写前几位保证其唯一性就好</li><li>版本回滚依靠HEAD指针</li><li>如果关闭了窗口如何找到版本号-&gt;<code>git reflog</code>用于记录你的每一个命令</li></ol></li></ol></li></ol></li><li>撤销修改：<ul><li><code>git checkout --file_name</code>:用于丢弃工作区和暂存区的修改<ul><li>自修改后还没放到暂存区，撤销回到和版本库一模一样的状态</li><li>修改后已经放置到了暂存区，撤销回到添加到暂存区后的状态</li><li>总之，回到最近一次<code>git commit</code>或<code>git add</code>的状态</li></ul></li><li><code>git reset HEAD &lt;file&gt;</code>可用于丢弃暂存区的修改<ul><li>将暂存区的修改回退到工作区</li></ul></li></ul></li><li>删除文件<ul><li>删除文件方法<ol><li><code>git rm file_name</code>:从版本库中删除这个文件</li><li><code>git commit -m &quot;message&quot;</code>:提交这次修改</li></ol></li><li>误删文件如何恢复<ul><li>使用<code>git checkout -- file_name</code>来恢复删除，空格不能少</li></ul></li></ul></li><li>将git的提交直线化：<code>rebase</code><ul><li>将你的分叉的提交变成一条直线，通过移动你的提交的位置</li><li>主要是为了方便查看</li></ul></li></ol><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><ol><li>工作区<ul><li>你在电脑里能够看到的目录就是一个工作区。</li></ul></li><li>版本库  <ul><li>隐藏的目录<code>.git</code>这个是版本库，其中最重要的就是版本库（stage/index)，还有自动创建的第一个分支master，以及指向master的一个指针HEAD.</li><li><code>git add</code>将所有的要提交的修改放到暂存区</li><li><code>git commit</code>一次性把暂存区的所有修改都提交都分支去</li><li>这个的先后顺序会影响到第几次的修改被提交。</li></ul></li></ol><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ol><li>设置SSH<ul><li>防止对方冒充github服务器<a href="https://help.github.com/en/articles/githubs-ssh-key-fingerprints" target="_blank" rel="noopener">详见</a></li></ul></li><li>添加远程仓库  </li></ol><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td><code>git remote name URL</code></td><td>添加远程仓库</td></tr><tr><td><code>git push -u 仓库名 分支名</code></td><td>将分支推向仓库（第一次需要全部，用于关联，之后可以直接<code>git push</code>)</td></tr><tr><td><code>git remote rm 仓库名</code></td><td>删除远程仓库</td></tr><tr><td><code>git clone URL</code></td><td>克隆一个本地仓库</td></tr></tbody></table><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ol><li><p>为什么有分支存在？</p><ol><li>开发新功能的过程中，放置你的未完成的工作给别人的开发造成困难。</li><li>建立自己的分支，可以随时提交自己完成的代码部分，而又不干扰别人的工作。</li><li>完成工作后可以将分支直接合并到主分支上，并且git的分支切换很快、很便捷。</li></ol></li><li><p>新建分支只要新建一个指针，之后对于这个指针进行操作就行了，最后合并的时候只要把HEAD的指针指向就好了。</p></li><li><p>分支的相关命令：  </p><ol><li>新建和切换的简单命令：<br><code>git checkout -b branch_name</code></li><li>新建分支的命令：<br><code>git branch branch_name</code></li><li>切换分支的命令：<br><code>git checkout branch_name</code></li><li>查看分支：<br><code>git branch</code></li><li>合并分支：<br><code>git merge branch_name</code></li><li>删除分支：<br><code>git branch -d branch_name</code></li></ol></li><li><p>解决冲突问题：</p><ol><li>简单的说就是，如果你的分支和你的主分支同时修改了同一个文件，那么会产生冲突</li><li>冲突问题的解决需要我们进行手动解决</li><li><code>git status</code>可以用于查看具体冲突的文件是什么和情况</li><li>之后通过手动修改后，将新建的文件重新add、commit后就可以解决。</li><li>可以<code>git log --graph --pretty=oneline --abbrev-commit</code>查看分支的合并情况，之后删除分支就可以。</li></ol></li><li><p>分支管理策略</p><ol><li>合并分支的时候Git如果能的话git会使用Fast forward模式，但是这种模式下删除分支会丢掉分支信息。</li><li>同时使用<code>git merge --no--ff -m &quot;message&quot; branch_name</code>中的no–ff来禁用上面那个模式</li><li>基本的分支管理策略：<ul><li>保证master分支的稳定性，不在上面干活</li><li>在其他的分支上干活，在发布版本的时候合并分支即可</li></ul></li></ol></li><li><p>bug分支</p><ol><li>bug分支的命名：”issue-number”</li><li>在修复bug的时候如果你正在进行的工作还没法提交的时候</li><li>使用<code>git stash</code>将当前的工作现场保存起来</li><li>之后在相应的分支上建立其子分支，之后秀谷并且提交，之后转换到master分支，将相应的bug分支删除</li><li>恢复工作现场：  </li></ol><table><thead><tr><th>特定的语句</th><th>作用</th></tr></thead><tbody><tr><td><code>git stash apply</code></td><td>用来恢复之前保存的工作不删除</td></tr><tr><td><code>git stash drop</code></td><td>用来在apply之后删除stash的内容</td></tr><tr><td><code>git stash list</code></td><td>查看刚刚保存的工作在哪里</td></tr><tr><td><code>git stash pop</code></td><td>恢复同时删除stash的内容</td></tr></tbody></table></li><li><p>feature 分支</p><ol><li>在软件开发中，向新的软件添加新的功能，需要增开一个feature分支，之后将其合并后，删除原分支。</li><li>如果最后由于种种原因，这个分支必须要删除，同时还没有被合并的分支，使用-D进行删除。</li></ol></li></ol><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ol><li>查看远程仓库信息：<ul><li><code>git remote</code>查看远程仓库的名称</li><li><code>git remote -v</code>查看更加详细的远程仓库的信息。</li></ul></li><li>推送分支：<ul><li><code>git push repository_name branch_name</code>将分支推送到远端仓库</li><li>是否推送一个分支<ol><li>master分支要保证时刻与远程同步</li><li>dev开发分支要和远程同步</li><li>bug分支在本地修复就好了，没必要推动到远端</li><li>feature分支是否推动，取决于你是否和别人合作进行开发</li></ol></li></ul></li><li>抓取分支：<ul><li>在另一台电脑上克隆有其他分支的仓库时，默认条件下只能看到master分支。</li><li>如果需要clone到dev分支的话需要创建远程的origin的dev分支到本地：<code>git checkout -b dev origin/dev</code></li><li>之后你就可以在dev上进行修改</li><li>这时候的你和你的伙伴的修改发生了冲突，你不能简单的pull，而是需要将你的本地的dev分支与远程origin/dev分支的链接进行指定，<code>git branch --set-upstream-to=&lt;branch-name&gt; origin/&lt;branch-name&gt;</code>，这样之后你就可以处理冲突了</li></ul></li></ol><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ol><li>标签是一个版本库的快照，为了确定其历史版本</li><li>tag+版本号和一个commit绑定在一起，来简化交流</li><li>创建标签：<ul><li><code>git tag name</code>来添加一个这个分支这个时刻的标签</li><li><code>git tag</code>用于查看这个分支现在的标签</li><li>如何创建之前版本的标签：<ol><li>使用命令<code>git log --pretty=onrline --abbrev-commit</code>命令查看之前的提交记录和版本信息</li><li>使用命令<code>git tag name commit_id</code>来给相应的版本信息打上标签</li></ol></li><li>将标签推送到远端仓库：<ol><li>推送某一个标签:<code>git push origin &lt;tagname&gt;</code></li><li>推动全部的标签:<code>git push origin --tags</code>推送全部标签</li></ol></li></ul></li><li>查看一个标签的详细信息<code>git show &lt;tag_name&gt;</code><ul><li>添加<code>-a</code>来指定标签名</li><li>添加<code>-m</code>来添加说明文字</li></ul></li><li>标签总是和commit挂钩，而不是和分支挂钩</li><li>删除标签：<ul><li>打错的本地标签(未推送到远程仓库):直接删除标签即可<code>git tag -d name</code></li><li>如何将远端的标签删除：<ol><li>删除本地标签</li><li>从远程删除标签：<code>git push origin:refs/tags/&lt;tagname&gt;</code></li></ol></li></ul></li></ol><h1 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h1><ol><li>参加别人的开源项目，需要folk这个项目到自己的账号底下，在从自己的账号git，才能够推送修改</li><li>强大的CSS框架：<a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">https://github.com/twbs/bootstrap</a></li></ol><h1 id="码云的使用"><a href="#码云的使用" class="headerlink" title="码云的使用"></a>码云的使用</h1><ol><li>国内的托管的git服务</li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">详情</a></li></ol><h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><ol><li>设置user.name和user.email</li><li>显示颜色：<code>git config --global color.ui true</code></li><li>忽略特殊文件：在git工作区的根目录下创建一个特殊的.gitignore，将需要忽略的文件名填进去就会使得git自动的忽略文件。<ol><li>GitHub为我们准备的所有<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">配置文件</a>，我们在线浏览就可以。</li><li>忽略文件的原则：<ol><li>忽略操作系统自动生成的文件，比如缩略图等</li><li>忽略编译产生的中间文件、可执行文件等</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</li></ol></li><li>但是在有忽略文件的同时，无法上传文件的排查<ol><li>强制进行提交：<code>-f</code>强制添加到git</li><li>规则出现问题，可以使用命令<code>git check-ignore -v filename</code>来排查是哪一条规则使得这个文件无法进行提交</li></ol></li></ol></li><li>配置命令的别名<ol><li><code>git config --global alias.st status</code></li><li>将命令status设置为st,这个命令未必只有一条字句，只要是一条命令的一部分就可</li><li>可以把lg配置成”log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</li><li>配置文件：  <ul><li>git 的配置文件都位于<code>.git/config</code>文件中，别名在alias后面，删除别名直接删除相应行就行。</li><li>git配置文件放在主目录下一个隐藏文件<code>.gitconfig</code>中</li></ul></li></ol></li></ol><h1 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h1><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">详见</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简要记录git学习笔记&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hello-everyone!</title>
    <link href="http://yoursite.com/2019/10/04/hello-everyone/"/>
    <id>http://yoursite.com/2019/10/04/hello-everyone/</id>
    <published>2019-10-04T12:48:26.000Z</published>
    <updated>2019-10-04T13:03:03.376Z</updated>
    
    <content type="html"><![CDATA[<p>hello everyone</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello everyone&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/04/hello-world/"/>
    <id>http://yoursite.com/2019/10/04/hello-world/</id>
    <published>2019-10-04T12:09:45.180Z</published>
    <updated>2019-10-04T12:09:45.180Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
