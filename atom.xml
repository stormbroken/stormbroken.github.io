<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stormbrokenの博客</title>
  
  <subtitle>留下生活学习的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-07T03:02:47.119Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Stormbroken</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java学习笔记 之 总记</title>
    <link href="http://yoursite.com/2019/10/06/java_%E6%80%BB%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/06/java_总记/</id>
    <published>2019-10-06T09:20:51.750Z</published>
    <updated>2019-10-07T03:02:47.119Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2019年4月9日，这个学习笔记诞生了。</p></blockquote><a id="more"></a><ol><li>程序，是一段静态的代码，它是应用软件执行的蓝本。</li></ol><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><ol><li>java文件开头顺序<ol><li>package</li><li>import</li><li>class：可以不声明public</li></ol></li></ol><h2 id="第一章-对象导论"><a href="#第一章-对象导论" class="headerlink" title="第一章 对象导论"></a>第一章 对象导论</h2><blockquote><blockquote><p>对于过程进行抽象<br><br>每个对象都有一个接口<br><br>创建一个类，之后可以操作和创建类的任意个对象<br></p></blockquote></blockquote><p><strong>程序开发人员分类</strong>  </p><blockquote><p>类创建者：     构建类（隐藏类之中脆弱的部分）<br><br>客户端程序员： 收集各种用来实现应用开发的类<br></p></blockquote><p><strong>内部界定边界的关键字</strong>  </p><table><thead><tr><th>关键字</th><th align="left">解释</th></tr></thead><tbody><tr><td>public</td><td align="left">对于任何人可见</td></tr><tr><td>private</td><td align="left">对于除了类型创建者和类型的内部方法之外任何人不可访问</td></tr><tr><td>protected</td><td align="left">基本和private相同，仅仅是在继承是可以访问父类而已</td></tr></tbody></table><p><strong>包访问权限</strong>  </p><blockquote><p>它是默认的访问权限，常见于多个包之间的情况，指的是在这种权限下类访问一个包（库组件）中的成员，但是包外相当于private<br></p></blockquote><p><strong>复用具体实现</strong>  </p><blockquote><p>组合：使用现有的类合成新的类<br></p><blockquote><p>1.通常被视为具有”has-a”关系<br><br><br>2.如果动态发生，被通常称为聚合<br><br><br>3.具有极大的灵活性，在不影响客户端代码的情况下，修改这些成员，当然同样可以在运行时修改这些成员（<strong>而继承没有这种情况</strong>）<br></p></blockquote></blockquote><p><strong>继承</strong><br>1.父类的变动会影响他的子类<br>2.继承主要是寻找相似程度和相近的方法<br>3.在子类中产生差异的方法有两种:  </p><blockquote><p>第一种：在子类中添加新的方法<br>第二种：在子类中覆盖父类中的方法（重载要求函数名、返回值、参数值类型均相同） </p></blockquote><p>4.继承关系“is-a”<br>5.在很多的子类和父类之间我们应用替代原则来制作接口  </p><p><strong>多态</strong><br>1.对于一类的物体我们使用泛化类型。<br>2.输入的时候泛化类型给我们便利，但是在输出的时候泛化类型却很难确定到底执行哪一部分。<br>3.在非面向对象程序设计的语言中，<em>前期绑定<em>被普遍使用。<br>4.在面向对象程序设计的语言中，</em>后期绑定<em>被采用，也就意味着向对象发送消时，被调用的代码直到*</em>运行*<em>的时候才被确定。<br><code>dosomething(circle)</code><br>这个表示一个圆被传入之后进行操作。<br>5.上述的这个可以被描述成为</em>向上转型</em>  </p><p><strong>单根继承</strong><br>这是一个便利于GC的操作  </p><p><strong>容器</strong>  </p><p><strong>参数化类型</strong><br>1.具有泛型  </p><p><strong>对象的创建和声明期</strong><br>1.将自动变量和限域变量放置在堆栈或者静态存储单元中<br>2.在堆中动态的创建对象  </p><p><strong>异常处理</strong><br>1.java中强制设置的、唯一可接受的错误报告方式。  </p><p><strong>并发编程</strong><br>1.同时的多线程编程，问题是会同时共享资源。  </p><p><strong>java和internet</strong><br><strong><em>web是什么</em></strong>  </p><blockquote><p>1.客户/服务器计算技术<br>2.客户端编程<br>3.服务端编程</p></blockquote><h1 id="第二章-一切都是对象"><a href="#第二章-一切都是对象" class="headerlink" title="第二章 一切都是对象"></a>第二章 一切都是对象</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><code>String s=&quot;baozi&quot;</code>这是一个引用，并不是一个对象</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>基本类型</th><th>大小</th><th>说明</th><th>默认初识值</th></tr></thead><tbody><tr><td>boolen</td><td>-</td><td>只能够取true和false</td><td>false</td></tr><tr><td>char</td><td>16b</td><td>-</td><td>‘\u0000’(null)</td></tr><tr><td>byte</td><td>8b</td><td>-</td><td>(byte)0</td></tr><tr><td>short</td><td>16b</td><td>-</td><td>(short)0</td></tr><tr><td>int</td><td>32b</td><td>-2<sup>31</sup>-2<sup>31</sup>-1</td><td>0</td></tr><tr><td>long</td><td>64b</td><td>-</td><td>0L</td></tr><tr><td>float</td><td>32b</td><td>-</td><td>0.0f</td></tr><tr><td>double</td><td>64b</td><td>-</td><td>0.0d</td></tr><tr><td>void</td><td>-</td><td>-</td><td>-</td></tr><tr><td>BigInterger</td><td>-</td><td>准确的表示任何大小的整数值，不会对视任何的信息</td><td></td></tr><tr><td>BigDecimal</td><td>-</td><td>支持任何精度的定点数</td><td></td></tr></tbody></table><ol><li>字节型和短整型只能起到限制数据的作用，并不能节省内存<ul><li>计算前会被提升到整形</li><li>byte a = byte + 1:编译错误，因为上面</li><li>应该是= (byte)(byte + 1)<br>详见p55 java编程思想</li></ul></li><li>double类型判断相同：不能用==，不然永远是不等于<ul><li>可以转化成字符串比是否相同</li><li>可以用Double.doubleToLongBits(number)转换成long来比较<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2></li></ul></li></ol><table><thead><tr><th>类型</th><th>特点</th></tr></thead><tbody><tr><td>数组</td><td>创建数组是每个引用被初始化为null，这样子在运行是如果遇到null，java会报错。</td></tr><tr><td>1. char数组在<code>char[] title = title1;</code>的情况下，引用的是相同数组，对其中一个改变会影响另一个</td><td></td></tr><tr><td>2. 如果要简单的拷贝</td><td></td></tr><tr><td>1. for循环一个一个进行复制</td><td></td></tr><tr><td>2. System.arraycopy()</td><td></td></tr><tr><td>+ public static native void arraycopy(Object src,  int  srcPos,Object dest, int destPos,int length);</td><td></td></tr><tr><td>3. Arrays.copyOf()</td><td></td></tr><tr><td>4. Object.clone()</td><td></td></tr><tr><td>3. Arrays.binarySearch(isbn,2)：二分查找关键字2的返回值(下标)</td><td></td></tr><tr><td>4. 声明一维数组：<code>String[] p / String a []</code></td><td></td></tr></tbody></table><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ol><li>if()这个语句中括号内部必须是布尔类型的值。</li></ol><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><ol><li>一定要记着写break</li></ol><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><ol><li>传统的for循环:<code>for(int i = 0;i &lt; 100 ;i+++)</code></li><li>增强的for循环:<code>for(String number:sets)</code></li></ol><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><table><thead><tr><th>存储区</th><th>特点</th></tr></thead><tbody><tr><td>寄存器</td><td>最快、数量有限、按需分配</td></tr><tr><td>堆栈</td><td>次快、指针向下分配内存、指针向上释放内存</td></tr><tr><td>堆</td><td>不关心寄存的时间长度，用于存放所有的java代码</td></tr><tr><td>常量储存</td><td>通常放置在程序内部，在嵌入式系统中存放在ROM中</td></tr><tr><td>非RAM存储</td><td>将对</td></tr></tbody></table><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><table><thead><tr><th>语句</th><th>语句作用</th></tr></thead><tbody><tr><td><code>Syetem.out.print()</code></td><td>标准打印但是不换行</td></tr><tr><td><code>System.out.println()</code></td><td>标准打印并且换行</td></tr><tr><td><code>readTheFile()</code></td><td>读入文件</td></tr></tbody></table><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li>//之后的文字到行末均为注释。 </li></ol><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h1 id="内存和虚拟机"><a href="#内存和虚拟机" class="headerlink" title="内存和虚拟机"></a>内存和虚拟机</h1><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h1 id="面向对象编程-职责-amp-协作"><a href="#面向对象编程-职责-amp-协作" class="headerlink" title="面向对象编程(职责&amp;协作)"></a>面向对象编程(职责&amp;协作)</h1><h1 id="软件工程建模"><a href="#软件工程建模" class="headerlink" title="软件工程建模"></a>软件工程建模</h1><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><ol><li>java的垃圾回收器要负责完成3件任务：<ul><li>分配内存</li><li>确保被引用对象的内存不被错误回收</li><li>回收不再被引用的对象的内存空间</li></ul></li><li>一般情况下，垃圾回收器在进行回收操作时，整个应用是被暂时中止的</li><li>最基本的做法：分代回收<ul><li>内存区域被划分为不同世代，对象依据其存活的时间被保存在对应世代的区域中</li><li>一般划分为三个世代:年轻、年老和永久</li></ul></li><li>年轻世代的内存区域进一步划分成：<ul><li>伊甸园:内存分配地方，一块连续的空闲内存区域</li><li>两个存活区:始终有一个保持是一个空白的，删除后交换</li></ul></li><li>年老和永久世代的内存区域的算法:”标记-清除-压缩”</li></ol><h1 id="main函数的含义"><a href="#main函数的含义" class="headerlink" title="main函数的含义"></a>main函数的含义</h1><ol><li>不同语言都可以写带参数的main函数，那么这是为什么呢？</li><li>C++的:<code>int main(int agrc,char**argv)</code><ul><li>直接运行，xx.exe，在命令行中，exe后面是可以加参数的。</li></ul></li><li>java的:<code>public static void main(String[] args)</code><ul><li>java是在某一个class中的。在java.class后面是可以加参数的</li><li>通过args拿到命令行后续的参数数据</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2019年4月9日，这个学习笔记诞生了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="http://yoursite.com/2019/10/05/Git%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/05/Git操作学习笔记/</id>
    <published>2019-10-05T13:30:00.000Z</published>
    <updated>2019-10-06T09:32:56.803Z</updated>
    
    <content type="html"><![CDATA[<p>简要记录git学习笔记</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>参考了廖雪峰的教程，从2019年4月24日开始书写这个学习笔记。</p><h1 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h1><ol><li>世界上最先进的分布式版本控制系统</li><li>保留的版本更新的信息</li><li>使用C语言建立的</li></ol><h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><ol><li>初始化仓库<br><code>git init</code>：将这个目录底下变成git可以管理的仓库</li><li>添加文件进入仓库：<ol><li><code>git add file_name</code>：添加摸个文档，使用.表示所有修改。</li><li><code>git commit -m &quot;message&quot;</code>：使用-m完成对于本次提交的说明</li><li><code>git push URL</code>：向远程仓库进行提交</li></ol></li><li>查看结果：<ol><li><code>git status</code>:用于实施的掌控仓库的状态</li><li><code>git diff</code>：用于查看具体修改了什么内容（相比于上次）</li></ol></li><li>版本回退：<ol><li><code>git log</code>：用于查看历史记录，版本信息等。可以添加<code>--pretty=oneline</code>参数来格式化其形式为版本号+注释。</li><li><code>git reset --hard HEAD^</code>：  <ol><li>用于返回上一个版本</li><li>同时你无法使用<code>git log</code>找到原来的版本，但是可以在同一个窗口中，找到版本号回到未来的某个版本<ol><li>版本号可以不写全，只要写前几位保证其唯一性就好</li><li>版本回滚依靠HEAD指针</li><li>如果关闭了窗口如何找到版本号-&gt;<code>git reflog</code>用于记录你的每一个命令</li></ol></li></ol></li></ol></li><li>撤销修改：<ul><li><code>git checkout --file_name</code>:用于丢弃工作区和暂存区的修改<ul><li>自修改后还没放到暂存区，撤销回到和版本库一模一样的状态</li><li>修改后已经放置到了暂存区，撤销回到添加到暂存区后的状态</li><li>总之，回到最近一次<code>git commit</code>或<code>git add</code>的状态</li></ul></li><li><code>git reset HEAD &lt;file&gt;</code>可用于丢弃暂存区的修改<ul><li>将暂存区的修改回退到工作区</li></ul></li></ul></li><li>删除文件<ul><li>删除文件方法<ol><li><code>git rm file_name</code>:从版本库中删除这个文件</li><li><code>git commit -m &quot;message&quot;</code>:提交这次修改</li></ol></li><li>误删文件如何恢复<ul><li>使用<code>git checkout -- file_name</code>来恢复删除，空格不能少</li></ul></li></ul></li><li>将git的提交直线化：<code>rebase</code><ul><li>将你的分叉的提交变成一条直线，通过移动你的提交的位置</li><li>主要是为了方便查看</li></ul></li></ol><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><ol><li>工作区<ul><li>你在电脑里能够看到的目录就是一个工作区。</li></ul></li><li>版本库  <ul><li>隐藏的目录<code>.git</code>这个是版本库，其中最重要的就是版本库（stage/index)，还有自动创建的第一个分支master，以及指向master的一个指针HEAD.</li><li><code>git add</code>将所有的要提交的修改放到暂存区</li><li><code>git commit</code>一次性把暂存区的所有修改都提交都分支去</li><li>这个的先后顺序会影响到第几次的修改被提交。</li></ul></li></ol><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ol><li>设置SSH<ul><li>防止对方冒充github服务器<a href="https://help.github.com/en/articles/githubs-ssh-key-fingerprints" target="_blank" rel="noopener">详见</a></li></ul></li><li>添加远程仓库  </li></ol><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td><code>git remote name URL</code></td><td>添加远程仓库</td></tr><tr><td><code>git push -u 仓库名 分支名</code></td><td>将分支推向仓库（第一次需要全部，用于关联，之后可以直接<code>git push</code>)</td></tr><tr><td><code>git remote rm 仓库名</code></td><td>删除远程仓库</td></tr><tr><td><code>git clone URL</code></td><td>克隆一个本地仓库</td></tr></tbody></table><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ol><li><p>为什么有分支存在？</p><ol><li>开发新功能的过程中，放置你的未完成的工作给别人的开发造成困难。</li><li>建立自己的分支，可以随时提交自己完成的代码部分，而又不干扰别人的工作。</li><li>完成工作后可以将分支直接合并到主分支上，并且git的分支切换很快、很便捷。</li></ol></li><li><p>新建分支只要新建一个指针，之后对于这个指针进行操作就行了，最后合并的时候只要把HEAD的指针指向就好了。</p></li><li><p>分支的相关命令：  </p><ol><li>新建和切换的简单命令：<br><code>git checkout -b branch_name</code></li><li>新建分支的命令：<br><code>git branch branch_name</code></li><li>切换分支的命令：<br><code>git checkout branch_name</code></li><li>查看分支：<br><code>git branch</code></li><li>合并分支：<br><code>git merge branch_name</code></li><li>删除分支：<br><code>git branch -d branch_name</code></li></ol></li><li><p>解决冲突问题：</p><ol><li>简单的说就是，如果你的分支和你的主分支同时修改了同一个文件，那么会产生冲突</li><li>冲突问题的解决需要我们进行手动解决</li><li><code>git status</code>可以用于查看具体冲突的文件是什么和情况</li><li>之后通过手动修改后，将新建的文件重新add、commit后就可以解决。</li><li>可以<code>git log --graph --pretty=oneline --abbrev-commit</code>查看分支的合并情况，之后删除分支就可以。</li></ol></li><li><p>分支管理策略</p><ol><li>合并分支的时候Git如果能的话git会使用Fast forward模式，但是这种模式下删除分支会丢掉分支信息。</li><li>同时使用<code>git merge --no--ff -m &quot;message&quot; branch_name</code>中的no–ff来禁用上面那个模式</li><li>基本的分支管理策略：<ul><li>保证master分支的稳定性，不在上面干活</li><li>在其他的分支上干活，在发布版本的时候合并分支即可</li></ul></li></ol></li><li><p>bug分支</p><ol><li>bug分支的命名：”issue-number”</li><li>在修复bug的时候如果你正在进行的工作还没法提交的时候</li><li>使用<code>git stash</code>将当前的工作现场保存起来</li><li>之后在相应的分支上建立其子分支，之后秀谷并且提交，之后转换到master分支，将相应的bug分支删除</li><li>恢复工作现场：  </li></ol><table><thead><tr><th>特定的语句</th><th>作用</th></tr></thead><tbody><tr><td><code>git stash apply</code></td><td>用来恢复之前保存的工作不删除</td></tr><tr><td><code>git stash drop</code></td><td>用来在apply之后删除stash的内容</td></tr><tr><td><code>git stash list</code></td><td>查看刚刚保存的工作在哪里</td></tr><tr><td><code>git stash pop</code></td><td>恢复同时删除stash的内容</td></tr></tbody></table></li><li><p>feature 分支</p><ol><li>在软件开发中，向新的软件添加新的功能，需要增开一个feature分支，之后将其合并后，删除原分支。</li><li>如果最后由于种种原因，这个分支必须要删除，同时还没有被合并的分支，使用-D进行删除。</li></ol></li></ol><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ol><li>查看远程仓库信息：<ul><li><code>git remote</code>查看远程仓库的名称</li><li><code>git remote -v</code>查看更加详细的远程仓库的信息。</li></ul></li><li>推送分支：<ul><li><code>git push repository_name branch_name</code>将分支推送到远端仓库</li><li>是否推送一个分支<ol><li>master分支要保证时刻与远程同步</li><li>dev开发分支要和远程同步</li><li>bug分支在本地修复就好了，没必要推动到远端</li><li>feature分支是否推动，取决于你是否和别人合作进行开发</li></ol></li></ul></li><li>抓取分支：<ul><li>在另一台电脑上克隆有其他分支的仓库时，默认条件下只能看到master分支。</li><li>如果需要clone到dev分支的话需要创建远程的origin的dev分支到本地：<code>git checkout -b dev origin/dev</code></li><li>之后你就可以在dev上进行修改</li><li>这时候的你和你的伙伴的修改发生了冲突，你不能简单的pull，而是需要将你的本地的dev分支与远程origin/dev分支的链接进行指定，<code>git branch --set-upstream-to=&lt;branch-name&gt; origin/&lt;branch-name&gt;</code>，这样之后你就可以处理冲突了</li></ul></li></ol><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ol><li>标签是一个版本库的快照，为了确定其历史版本</li><li>tag+版本号和一个commit绑定在一起，来简化交流</li><li>创建标签：<ul><li><code>git tag name</code>来添加一个这个分支这个时刻的标签</li><li><code>git tag</code>用于查看这个分支现在的标签</li><li>如何创建之前版本的标签：<ol><li>使用命令<code>git log --pretty=onrline --abbrev-commit</code>命令查看之前的提交记录和版本信息</li><li>使用命令<code>git tag name commit_id</code>来给相应的版本信息打上标签</li></ol></li><li>将标签推送到远端仓库：<ol><li>推送某一个标签:<code>git push origin &lt;tagname&gt;</code></li><li>推动全部的标签:<code>git push origin --tags</code>推送全部标签</li></ol></li></ul></li><li>查看一个标签的详细信息<code>git show &lt;tag_name&gt;</code><ul><li>添加<code>-a</code>来指定标签名</li><li>添加<code>-m</code>来添加说明文字</li></ul></li><li>标签总是和commit挂钩，而不是和分支挂钩</li><li>删除标签：<ul><li>打错的本地标签(未推送到远程仓库):直接删除标签即可<code>git tag -d name</code></li><li>如何将远端的标签删除：<ol><li>删除本地标签</li><li>从远程删除标签：<code>git push origin:refs/tags/&lt;tagname&gt;</code></li></ol></li></ul></li></ol><h1 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h1><ol><li>参加别人的开源项目，需要folk这个项目到自己的账号底下，在从自己的账号git，才能够推送修改</li><li>强大的CSS框架：<a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">https://github.com/twbs/bootstrap</a></li></ol><h1 id="码云的使用"><a href="#码云的使用" class="headerlink" title="码云的使用"></a>码云的使用</h1><ol><li>国内的托管的git服务</li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">详情</a></li></ol><h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><ol><li>设置user.name和user.email</li><li>显示颜色：<code>git config --global color.ui true</code></li><li>忽略特殊文件：在git工作区的根目录下创建一个特殊的.gitignore，将需要忽略的文件名填进去就会使得git自动的忽略文件。<ol><li>GitHub为我们准备的所有<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">配置文件</a>，我们在线浏览就可以。</li><li>忽略文件的原则：<ol><li>忽略操作系统自动生成的文件，比如缩略图等</li><li>忽略编译产生的中间文件、可执行文件等</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</li></ol></li><li>但是在有忽略文件的同时，无法上传文件的排查<ol><li>强制进行提交：<code>-f</code>强制添加到git</li><li>规则出现问题，可以使用命令<code>git check-ignore -v filename</code>来排查是哪一条规则使得这个文件无法进行提交</li></ol></li></ol></li><li>配置命令的别名<ol><li><code>git config --global alias.st status</code></li><li>将命令status设置为st,这个命令未必只有一条字句，只要是一条命令的一部分就可</li><li>可以把lg配置成”log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</li><li>配置文件：  <ul><li>git 的配置文件都位于<code>.git/config</code>文件中，别名在alias后面，删除别名直接删除相应行就行。</li><li>git配置文件放在主目录下一个隐藏文件<code>.gitconfig</code>中</li></ul></li></ol></li></ol><h1 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h1><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">详见</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简要记录git学习笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器配置过程</title>
    <link href="http://yoursite.com/2019/07/11/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/07/11/云服务器搭建/</id>
    <published>2019-07-11T15:59:00.000Z</published>
    <updated>2019-10-07T03:05:49.586Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是记录了我搭建一台CentOS服务器环境的过程，主要搭建了java、Tomcat、SQL等主要环境。(注:以阿里云轻量应用服务器为例)</p><a id="more"></a><ol><li>需要的前置软件和硬件：<ol><li>软件：XShell、Xftp、navicat(如果需要sql的话，需要)。</li><li>硬件：一台安装了centOs系统镜像的阿里云轻量应用服务器。</li><li>需要提前下载一个jdk包、一个tomcat包。(后缀为<code>.tar.gz</code>或<code>.tar.xz</code>)</li></ol></li><li>本教程包括：jdk环境配置、Tomcat环境配置、sql环境配置。</li></ol><h1 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h1><h2 id="简单介绍一下阿里云轻量应用服务器"><a href="#简单介绍一下阿里云轻量应用服务器" class="headerlink" title="简单介绍一下阿里云轻量应用服务器"></a>简单介绍一下阿里云轻量应用服务器</h2><ol><li>购买之后，可以进入控制台来查看自己服务器的信息。<ul><li>注意：公用IP和内部IP不同，外网访问要用公用IP，不要轻易泄露。</li></ul></li><li>域名可以视情况决定是否购买和使用。</li><li>之后可以通过阿里云控制台进行远程连接(用创建服务器时候的密码)。<ul><li>个人比较喜欢使用XShell+Xftp。</li></ul></li></ol><h2 id="使用XShell来建立远程连接"><a href="#使用XShell来建立远程连接" class="headerlink" title="使用XShell来建立远程连接"></a>使用XShell来建立远程连接</h2><ol><li>打开XShell(不付费可以用Free for Home/School版本)。</li><li>打开Xhell会弹出”会话”窗口，之后我们要建立一个会话。<ol><li>点击“新建”按钮。</li><li>打开之后找到“连接”。</li><li>在“连接中”：<ol><li>首先名称自己命名即可。</li><li>协议为：SSH。</li><li>主机：刚刚的公用IP。</li><li>端口默认22即可。</li></ol></li><li>点下确认，新的会话建立。</li></ol></li><li>完成远程连接：<ol><li>双击刚刚建立的会话(或者选中会话，然后单击连接)。</li><li>弹出用户名：输入root(购买服务器密码时候的那个用户)。<ul><li>可以选择记住用户名(推荐)。</li></ul></li><li>之后进入SSH用户身份验证，输入刚刚的密码即可(如果忘记，可以到阿里云控制台，概述里面的公用IP后面的修改密码进行修改)。</li><li>确认进入远程连接。</li></ol></li></ol><h2 id="使用Xftp传输文件"><a href="#使用Xftp传输文件" class="headerlink" title="使用Xftp传输文件"></a>使用Xftp传输文件</h2><ol><li>下载好你即将安装的jdk和Tomcat包。</li><li>传输到服务器上：<ol><li>方法一:使用远程连接命令行(不推荐)。</li><li>方法二:打开已经安装好的Xftp。<ol><li>同样和XShell一样，“新建”会话</li><li>在“新建会话”属性中，名称自定义，主机即为公用IP，协议默认SFTP，端口默认22。</li><li>可以在这个界面直接输入你的用户名和账号，也可以一会连接时输入(基本同XShell)。</li></ol></li><li>方法三(推荐):在刚刚已经连接上的XShell中，点击窗口-&gt;传送新建文件(免密打开Xftp)。</li></ol></li><li>这时，左边是你的电脑的文件目录，右边是你的服务器的文件目录。</li><li>直接把你的文件拖到右侧即可，推荐在/usr下面单独建立java和tomcat来放置，方便管理。</li></ol><h1 id="正式开始配置环境"><a href="#正式开始配置环境" class="headerlink" title="正式开始配置环境"></a>正式开始配置环境</h1><ol><li>介绍接下来用到的部分linux命令:<ol><li><code>cd name</code>:进入相应目录文件夹。</li><li><code>cd ..</code>:返回上级目录。</li><li><code>cd</code>:返回一开始状态。</li><li><code>ls</code>:查看本级目录下文件和文件夹情况。</li><li><code>mv filename1 filename2</code>:对文件夹进行重命名。</li></ol></li></ol><h2 id="java运行环境-jdk-配置"><a href="#java运行环境-jdk-配置" class="headerlink" title="java运行环境(jdk)配置"></a>java运行环境(jdk)配置</h2><ol><li>使用linux命令进入你刚刚放置你下载jdk的文件夹下</li><li>使用命令:<code>tar -zxvf  filename(jdk-8u211-linux-x64).tar.gz</code>来完成解压<ul><li>如果文件尾部是<code>.tar.xz</code>，则命令需要变为:<code>tar -xvf  filename(jdk-8u211-linux-x64).tar.xz</code></li><li>解压后可以通过Xftp或者<code>rm -f (jdk-8u211-linux-x64).tar.gz</code>来删除压缩包</li></ul></li><li>解压后，我们需要为java的jdk配置配置环境变量<ol><li>进入/etc文件夹:<code>cd /etc</code></li><li>修改文件夹中的profile文件:<ol><li>打开编辑器:<code>vi profile</code>。</li><li>进入编辑模式:按i进入编辑模式</li><li>在文件最后加上:<ul><li><code>#set java environment</code></li><li><code>export JAVA_HOME=/usr/java/jdk/jdk版本号(jdk1.8.0_211)</code></li><li><code>export JRE_HOME=/usr/java/jdk/jdk版本号(jdk1.8.0_211)/jre</code></li><li><code>export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</code></li><li><code>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PAT</code></li></ul></li><li>按下Esc键退出编辑模式</li><li>输入<code>:wq</code>退出并保存修改</li><li>退出后在文件夹下输入命令:<code>source /etx/profile</code>使用命令行刷新</li></ol></li></ol></li><li>最后检查安装情况：<ol><li>输入<code>java -version</code>回车</li><li>显示java信息即为安装成功</li></ol></li></ol><h2 id="tomcat环境的配置"><a href="#tomcat环境的配置" class="headerlink" title="tomcat环境的配置"></a>tomcat环境的配置</h2><ol><li>首先下载好tomcat的相应包</li><li>进入到Tomcat所在位置，然后输入命令:<code>tar -zxvf filename(apache-tomcat-8.5.41).tar.gz</code>完成解压</li><li>为了方便我们可以重命名之后的文件夹(不是必要操作)<ul><li><code>mv filename(apache-tomcat-8.5.41) filename2</code></li></ul></li><li>配置Tomcat的环境：<ol><li>进入解压出文件夹的bin文件夹下:<code>cd /usr/java/tomcat/解压文件夹名/bin</code></li><li>编辑setclasspath.sh脚本:<code>vi setclasspath.sh</code></li><li>进入编辑模式，在文件末尾添加：<ul><li><code>export JAVA_HOME=/usr/java/jdk/jdk版本编号(jdk1.8.0_211)</code></li><li><code>export JRE_HOME=/usr/java/jdk/jdk版本编号(jdk1.8.0_211)/jre</code></li></ul></li><li>保存编辑:按下Esc键，然后输入<code>:wq</code>，保存后退出</li><li>修改端口号(可选):默认端口号为8080<ol><li>进入解压文件夹下的conf目录中找到server.xml文件</li><li>进入编辑模式:<code>vi server.xml</code></li><li>找到<code>&lt;Connector port=&quot;你想要的端口号&quot; protocol = &quot;HTTP/1.1&quot;...</code>进行修改</li><li>按下Esc键后输入<code>:wq</code>退出即可</li></ol></li></ol></li><li>启动Tomcat，指令输入：<code>./startup.sh</code><ul><li>在解压文件夹的bin文件夹中</li><li>显示<code>Tomcat started</code>则成功开启</li></ul></li><li>查看运行的项目：<ol><li>在阿里云轻量服务器控制台中，找到防火墙，添加协议:自定义+TCP+端口号，确认。</li><li>使用你的公网IP+你设定的端口号(默认8080):<code>http://公用IP:端口号/</code></li><li>当你看到默认的Tomcat界面时就已经成功了(如果被拒绝访问，可能是阿里云的协议的延缓时间，等约5-10分钟左右再次尝试)</li></ol></li></ol><h2 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ol><li>查看之前安装情况:<code>rm -qa | grep mysql</code></li><li>如果安装了，普通删除模式:<code>rpm -e mysql</code></li><li>安装MySQL官方的Yum Repository<ul><li><code>wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm(具体版本)</code></li></ul></li><li>下载rpm包:<ul><li><code>yum localinstall mysql80-community-release-el7-3.noarch.rpm(具体版本)</code></li><li><code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code></li></ul></li><li>安装MySQL服务<ul><li><code>yum install mysql-community-server</code></li></ul></li></ol><h3 id="启动配置MySQL"><a href="#启动配置MySQL" class="headerlink" title="启动配置MySQL"></a>启动配置MySQL</h3><ol><li>启动MySQL:<code>systemctl start mysqld</code></li><li>查看MySQL运行状态：<code>service mysqld status</code></li><li>查看初识状态下生成的初始密码：<code>cat /var/log/mysqld.log | grep password</code><ul><li>会显示:<code>-- A temporary password is generated for root@localhost: (password)</code></li></ul></li><li>接下来登入MySQL：<ol><li>输入:<code>mysql -u root -p</code></li><li>会让你输入密码，第一次登陆输入默认密码即可<ul><li>注意：输入密码不会显示，连*都没有</li></ul></li></ol></li></ol><h3 id="MySQL密码"><a href="#MySQL密码" class="headerlink" title="MySQL密码"></a>MySQL密码</h3><ol><li>然后首次登陆必须修改密码，不然无法执行操作<ol><li>查看密码策略：<code>mysql&gt; show variables like &#39;%password%&#39;;</code><ul><li>注意不可以没有分号</li></ul></li><li>默认密码策略：密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。</li><li>密码策略(validate_password_policy):<ol><li>0 or Low:检查长度</li><li>1 or MEDIUM:密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。</li><li>2 or STRONG:检查长度、数字、大小写字母、特殊符号和词典文件</li><li>修改密码策略<ol><li>在<code>/etc/my.cnf</code>中添加<code>validate_password_policy=0</code>来设置(不推荐)</li><li>在mysql中设置:<ol><li><code>set global validate_password.policy=LOW;</code></li><li><code>set global validate_password.length=6;</code></li></ol></li></ol></li></ol></li></ol></li><li>修改密码:<code>mysql&gt;ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;yourpassword&#39;;</code>,密码策略：1</li><li>修改访问数据权限：<ol><li><code>mysql&gt;use mysql;</code></li><li>授权用户名的权限，赋予任何主机访问数据的权限:<ol><li><code>mysql&gt; update user set host=&#39;%&#39; where user=&#39;root&#39;;</code></li><li><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; WITH GRANT OPTION;</code></li><li>刷新权限:<code>mysql&gt; FLUSH PRIVILEGES;</code></li></ol></li></ol></li></ol><h3 id="创建一般用户"><a href="#创建一般用户" class="headerlink" title="创建一般用户"></a>创建一般用户</h3><ol><li>修改密码策略(选做)</li><li>查看密码策略，方便设置密码</li><li>创建用户:<code>create user &#39;yourname&#39;@&#39;%&#39; IDENTIFIED BY &#39;yourpassword&#39;;</code></li><li>赋予访问权限:<code>GRANT ALL PRIVILEGES ON *.* TO &#39;yourname&#39;@&#39;%&#39;;</code></li></ol><h3 id="其他的注意"><a href="#其他的注意" class="headerlink" title="其他的注意"></a>其他的注意</h3><ol><li>如果遇到MySQL报时区错误：<ol><li>错误码:<code>The server time zone value &#39;ÖÐ¹ú±ê×¼Ê±¼ä&#39; is unrecognized or represents more than one</code></li><li>解决:<ul><li><code>show variables like &#39;%time_zone%&#39;;</code></li><li><code>set global time_zone=&#39;+8:00&#39;;</code></li></ul></li></ol></li></ol><h3 id="MySQL的部分命令"><a href="#MySQL的部分命令" class="headerlink" title="MySQL的部分命令"></a>MySQL的部分命令</h3><ol><li>启动命令:<code>systemctl start mysqld.service</code></li><li>结束命令:<code>systemctl stop mysqld.service</code></li><li>重启命令:<code>systemctl restart mysqld.service</code></li><li>开机重启设置:<code>systemctl enable mysqld.service</code></li><li>查看MySQL的运行状态:<code>service mysqld status</code></li><li>mysql中的部分查看指令:<ol><li><code>show databases</code>:查看所有数据库名</li><li><code>use 数据库名</code>:进入数据库</li><li><code>show tables</code>:查看当前数据库条件下的表名</li><li><code>select * from 表名</code>:查看某个表下具体的数据</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是记录了我搭建一台CentOS服务器环境的过程，主要搭建了java、Tomcat、SQL等主要环境。(注:以阿里云轻量应用服务器为例)&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>写在前面</title>
    <link href="http://yoursite.com/2019/01/01/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <id>http://yoursite.com/2019/01/01/写在前面/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-10-07T03:11:26.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这个博客是19年下半年才开始搭建的，而个人的笔记却要早很多，从19年初就已经开始陆陆续续地写博客，大多数都是自己学习过程中做下的一些笔记。</p><h1 id="博客来源"><a href="#博客来源" class="headerlink" title="博客来源"></a>博客来源</h1><ol><li>大多数的博客中的笔记，都是针对某一门课，某一本书，某些教程而写出来的。</li><li>由于数目比较大，来源比较杂，也就没有一一列出部分来源。</li></ol><h1 id="博客后续内容"><a href="#博客后续内容" class="headerlink" title="博客后续内容"></a>博客后续内容</h1><ol><li>慢慢的会把一些笔记更新到这个博客上，包括后端、前端、机器学习等等很多。</li><li>希望自己做的笔记能有更多的一些用处。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;这个博客是19年下半年才开始搭建的，而个人的笔记却要早很多，从19年初就已经开始陆陆续续地写博客，大多数都是自己学习过程中做
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
